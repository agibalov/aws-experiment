#!/usr/bin/env node

const { spawnSync } = require('child_process');
const { writeFileSync } = require('fs');

const region = 'us-east-1';
const stackName = 'EmrExperiment1';
const deploymentBucketName = 'emr-experiment-bucket';
const ec2KeyName = 'EmrExperimentEc2KeyPair';
const ec2KeyLocalFilename = 'key.pem';

const yargs = require('yargs');
const argv = yargs
    .showHelpOnFail(true)
    .demandCommand(1, '')

    .command('create-key', 'Create SSH key', () => {}, () => {
        shell(`aws ec2 create-key-pair \
            --key-name ${ec2KeyName} \
            --query \'KeyMaterial\' \
            --output text >${ec2KeyLocalFilename}`);
        shell(`chmod 400 ${ec2KeyLocalFilename}`);
    })
    .command('delete-key', 'Delete SSH key', () => {}, () => {
        shell(`aws ec2 delete-key-pair \
            --key-name ${ec2KeyName}`);
        shell(`rm ${ec2KeyLocalFilename}`);
    })

    .command('deploy', 'Deploy everything', () => {}, () => {
        console.log('Deploying');

        shell(`aws s3 mb s3://${deploymentBucketName} --region ${region}`);
        shell(`aws s3 cp \
            build/libs/aws-emr-experiment-1.0-SNAPSHOT.jar \
            s3://${deploymentBucketName} \
            --region ${region}`);
        shell(`aws s3 cp \
            sample.csv \
            s3://${deploymentBucketName}/sample/ \
            --region ${region}`);
        shell(`aws cloudformation package \
            --template-file cf.yml \
            --s3-bucket ${deploymentBucketName} \
            --output-template-file _packaged.yml`);

        shell(`aws cloudformation deploy \
            --template-file _packaged.yml \
            --stack-name ${stackName} \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${region} \
            --parameter-overrides \
            DeploymentBucketName=${deploymentBucketName} \
            Ec2KeyName=${ec2KeyName}`);
    })
    .command('undeploy', 'Undeploy everything', () => {}, () => {
        console.log('Undeploying');

        shell(`aws cloudformation delete-stack --stack-name ${stackName} --region ${region}`);
        shell(`aws cloudformation wait stack-delete-complete --stack-name ${stackName} --region ${region}`);
        shell(`aws s3 rm s3://${deploymentBucketName} --recursive`);
        shell(`aws s3 rb s3://${deploymentBucketName} --force`);
    })
    .command('submit', 'Submit a dummy custom JAR step', () => {}, () => {
        console.log('Submitting a step');

        shell(`aws s3 cp \
            build/libs/aws-emr-experiment-1.0-SNAPSHOT.jar \
            s3://${deploymentBucketName} \
            --region ${region}`);

        const clusterId = getStackOutput('ClusterId');
        writeFileSync('step.json', JSON.stringify([{
            'Name': 'MyDummyCustomJarStep',
            'Args': [ 'argOne', 'argTwo', 'argThree' ],
            'Jar': `s3://${deploymentBucketName}/aws-emr-experiment-1.0-SNAPSHOT.jar`,
            'MainClass': 'me.loki2302.EmrHandler',
            'Type': 'CUSTOM_JAR',
            'Properties': 'myCustomSystemPropertyOne=theValueForIt,myCustomSystemPropertyTwo=hahaha'
        }]));

        shell(`aws emr add-steps \
            --cluster-id ${clusterId} \
            --steps file://./step.json`);
    })
    .command('ssh', 'Generate a command that SSHes to EMR master (do $(./tool ssh))', () => {}, () => {
        const clusterId = getStackOutput('ClusterId');
        console.log(`aws emr ssh --cluster-id ${clusterId} --key-pair-file ./${ec2KeyLocalFilename}`);
    })
    .help()
    .argv;

function shell(command) {
    console.log(command);

    const result = spawnSync(command, [], {
        shell: '/bin/bash',
        stdio: 'inherit'
    });

    if(result.error) {
        throw result.error;
    }

    if(result.status != 0) {
        throw 'status != 0';
    }

    return result;
}

function getShellOutput(command) {
    const result = spawnSync(command, [], {
        shell: '/bin/bash'
    });

    if(result.error) {
        throw result.error;
    }

    if(result.status != 0) {
        throw 'status != 0';
    }

    return result.stdout.toString().trim();
}

function getStackOutput(outputKey) {
    return getShellOutput(`aws cloudformation describe-stacks \
            --stack-name ${stackName} \
            --query 'Stacks[0].Outputs[?OutputKey==\`'${outputKey}'\`].OutputValue' \
            --output text \
            --region ${region}`);
}
