#!/usr/bin/env node

const { spawnSync } = require('child_process');

const region = 'us-east-1';

const yargs = require('yargs');
yargs
    .showHelpOnFail(true)
    .demandCommand(1, '')
    .option('envTag', {
        demandOption: true
    })
    .command('deploy', 'Do deploy things', (yargs) => {
        return yargs.option('envType', {
            demandOption: true,
            choices: [ 'dev', 'qa' ]
        })
    }, (argv) => {
        const envType = argv.envType;
        const envTag = argv.envTag;
        const stackName = makeStackName(envTag);

        console.log(`Deploying envType=${envType} to stack=${stackName}`);

        shell(`aws cloudformation deploy \
            --template-file cf.yml \
            --stack-name ${stackName} \
            --capabilities CAPABILITY_IAM \
            --region ${region} \
            --parameter-overrides \
            EnvTag=${envTag} \
            EnvType=${envType}`);
    })
    .command('undeploy', 'Do undeploy things', () => {}, (argv) => {
        const stackName = makeStackName(argv.envTag);
        console.log(`Undeploying ${stackName}`);

        shell(`aws cloudformation delete-stack --stack-name ${stackName} --region ${region}`);
        shell(`aws cloudformation wait stack-delete-complete --stack-name ${stackName} --region ${region}`);
    })
    .help()
    .argv;

function makeStackName(envTag) {
    return `agibalov-${envTag}`;
}

function shell(command) {
    console.log(command);

    const result = spawnSync(command, [], {
        shell: '/bin/bash',
        stdio: 'inherit'
    });

    if(result.error) {
        throw result.error;
    }

    if(result.status != 0) {
        throw 'status != 0';
    }

    return result;
}

function getStackOutput(outputKey) {
    const result = spawnSync(`aws cloudformation describe-stacks \
            --stack-name ${stackName} \
            --query 'Stacks[0].Outputs[?OutputKey==\`'${outputKey}'\`].OutputValue' \
            --output text \
            --region ${region}`, [], {
        shell: '/bin/bash'
    });

    if(result.error) {
        throw result.error;
    }

    if(result.status != 0) {
        throw 'status != 0';
    }

    return result.stdout.toString().trim();
}
