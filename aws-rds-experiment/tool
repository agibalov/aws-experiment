#!/usr/bin/env node

const { spawnSync } = require('child_process');

const region = 'us-east-1';
const stackName = 'rds-experiment';

const yargs = require('yargs');
const _ = yargs
    .showHelpOnFail(true)
    .demandCommand(1, '')
    .command('deploy', 'Do deploy things', () => {
    }, () => {
        console.log('Deploying');

        shell(`aws cloudformation deploy \
            --template-file cf.yml \
            --stack-name ${stackName} \
            --capabilities CAPABILITY_IAM \
            --region ${region}`);
    })
    .command('undeploy', 'Do undeploy things', () => {}, () => {
        console.log('Undeploying');

        shell(`aws cloudformation delete-stack --stack-name ${stackName} --region ${region}`);
        shell(`aws cloudformation wait stack-delete-complete --stack-name ${stackName} --region ${region}`);
    })
    .command('create-db', 'Create a dummy database',  (yargs) => {
        return yargs.option('name', {
            demandOption: true
        })
    }, (argv) => {
        console.log('Creating a dummy database');

        const host = getStackOutput('RdsInstanceAddress');
        console.log(`DB host: ${host}`);

        const port = getStackOutput('RdsInstancePort');
        console.log(`DB port: ${port}`);

        const name = argv.name;
        console.log(`DB name: ${name}`);

        shell(`./gradlew flywayMigrate \
            -PdbHost=${host} \
            -PdbPort=${port} \
            -PdbName=${name}`)
    })
    .help()
    .argv;

function shell(command) {
    console.log(command);

    const result = spawnSync(command, [], {
        shell: '/bin/bash',
        stdio: 'inherit'
    });

    if(result.error) {
        throw result.error;
    }

    if(result.status != 0) {
        throw 'status != 0';
    }

    return result;
}

function getStackOutput(outputKey) {
    const result = spawnSync(`aws cloudformation describe-stacks \
            --stack-name ${stackName} \
            --query 'Stacks[0].Outputs[?OutputKey==\`'${outputKey}'\`].OutputValue' \
            --output text \
            --region ${region}`, [], {
        shell: '/bin/bash'
    });

    if(result.error) {
        throw result.error;
    }

    if(result.status != 0) {
        throw 'status != 0';
    }

    return result.stdout.toString().trim();
}
