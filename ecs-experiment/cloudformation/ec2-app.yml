AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  EcsStackName:
    Type: String
  Image:
    Type: String

Outputs:
  Url:
    Value: !Sub "http://${LoadBalancer.DNSName}"

Mappings:
  ConstMap:
    singleton:
      AppContainerName: AppContainer
      AppContainerPort: 8080

Resources:
  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-AppLogGroup"
      RetentionInDays: 1

  AppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ec2-app
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      ContainerDefinitions:
        - Name: !FindInMap [ "ConstMap", "singleton", "AppContainerName" ]
          Memory: 256
          PortMappings:
            - ContainerPort: !FindInMap [ "ConstMap", "singleton", "AppContainerPort" ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AppLogGroup
              awslogs-region: !Ref AWS::Region
          Image: !Ref Image

  AppEcsService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${EcsStackName}-EcsCluster"
      TaskDefinition: !Ref AppTaskDefinition
      DesiredCount: 1
      LaunchType: EC2
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      Role: !Ref AppEcsServiceRole
      LoadBalancers:
        - ContainerName: !FindInMap [ "ConstMap", "singleton", "AppContainerName" ]
          ContainerPort: !FindInMap [ "ConstMap", "singleton", "AppContainerPort" ]
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  AppEcsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AppEcsServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-LoadBalancer"
      SecurityGroups:
        - Fn::ImportValue: !Sub "${EcsStackName}-AlbSecurityGroup"
      Subnets:
        - Fn::ImportValue: !Sub "${EcsStackName}-Az1PublicSubnet"
        - Fn::ImportValue: !Sub "${EcsStackName}-Az2PublicSubnet"
      Scheme: internet-facing

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-TargetGroup"
      VpcId:
        Fn::ImportValue: !Sub "${EcsStackName}-Vpc"
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      TargetType: instance

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyEcsInstanceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  EcsInstanceRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: MyEcsInstanceRoleInstanceProfile
      Path: /
      Roles:
        - !Ref EcsInstanceRole

  EcsInstanceLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-045f1b3f87ed83659
      InstanceType: t2.micro
      AssociatePublicIpAddress: true
      KeyName: !Ref AWS::NoValue
      SecurityGroups:
        - Fn::ImportValue: !Sub "${EcsStackName}-EcsSecurityGroup"
      IamInstanceProfile: !GetAtt EcsInstanceRoleInstanceProfile.Arn
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash
            echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
          - EcsCluster:
              Fn::ImportValue: !Sub "${EcsStackName}-EcsCluster"

  EcsInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::Sub:
          - "${Az1PublicSubnet},${Az2PublicSubnet}"
          - Az1PublicSubnet:
              Fn::ImportValue: !Sub "${EcsStackName}-Az1PublicSubnet"
            Az2PublicSubnet:
              Fn::ImportValue: !Sub "${EcsStackName}-Az2PublicSubnet"
      LaunchConfigurationName: !Ref EcsInstanceLaunchConfiguration
      MinSize: "1"
      MaxSize: "1"
      DesiredCapacity: "1"
      Tags:
        - Key: Name
          Value: EcsInstanceAutoScalingGroup
          PropagateAtLaunch: true
