AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  SharedStackName:
    Type: String
  AppImage:
    Type: String

Outputs:
  Url:
    Value: !Sub "http://${LoadBalancer.DNSName}"

Mappings:
  ConstMap:
    singleton:
      AppContainerName: AppContainer
      AppContainerPort: 8080

Resources:
  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-AppLogGroup"
      RetentionInDays: 1

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '1024'
      Memory: '2GB'
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      Family: app
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !FindInMap [ "ConstMap", "singleton", "AppContainerName" ]
          Essential: true
          PortMappings:
            - ContainerPort: !FindInMap [ "ConstMap", "singleton", "AppContainerPort" ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AppLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Image: !Ref AppImage
        - Name: xray
          Essential: true
          Cpu: 32
          MemoryReservation: 256
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          Image: amazon/aws-xray-daemon:3.3.3
          EntryPoint:
            - /xray
            - -t
            - 0.0.0.0:2000
            - -b
            - 0.0.0.0:2000
            - --log-level
            - dev
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AppLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: xraydaemon

  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListener
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${SharedStackName}-EcsCluster"
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${SharedStackName}-EcsSecurityGroup"
          Subnets:
            - Fn::ImportValue: !Sub "${SharedStackName}-Az1PublicSubnet"
            - Fn::ImportValue: !Sub "${SharedStackName}-Az2PublicSubnet"
      LoadBalancers:
        - ContainerName: !FindInMap [ "ConstMap", "singleton", "AppContainerName" ]
          ContainerPort: !FindInMap [ "ConstMap", "singleton", "AppContainerPort" ]
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-LoadBalancer"
      SecurityGroups:
        - Fn::ImportValue: !Sub "${SharedStackName}-AlbSecurityGroup"
      Subnets:
        - Fn::ImportValue: !Sub "${SharedStackName}-Az1PublicSubnet"
        - Fn::ImportValue: !Sub "${SharedStackName}-Az2PublicSubnet"
      Scheme: internet-facing

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-TargetGroup"
      VpcId:
        Fn::ImportValue: !Sub "${SharedStackName}-Vpc"
      Port: !FindInMap [ "ConstMap", "singleton", "AppContainerPort" ]
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      TargetType: ip

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
