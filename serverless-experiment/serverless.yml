AWSTemplateFormatVersion: 2010-09-09

Parameters:
  WebsiteBucketName:
    Type: String

Outputs:
  WebsiteUrl:
    Value: !GetAtt WebsiteBucket.WebsiteURL
  RestApiUrl:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${RestApiStage}"
  RestApiId:
    Value: !Ref RestApi
  RestApiStageName:
    Value: !Ref RestApiStage

Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref WebsiteBucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
    DeletionPolicy: Delete

  RestApiIntegrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: InvokeLambdas
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: "*"

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RestApi
      Body:
        swagger: "2.0"
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              responses: {}
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiHandlerLambdaFunction.Arn}/invocations"
                credentials: !GetAtt RestApiIntegrationRole.Arn
                httpMethod: POST
                passthroughBehavior: when_no_match

  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
      StageName: DummyStagePleaseIgnore

  RestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref RestApiDeployment
      StageName: Dummy

  ApiHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ApiHandlerLambdaFunction}"
      RetentionInDays: 1

  ApiHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: WriteLogs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: "*"
      - PolicyName: ReadAndWriteDynamoDb
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource: "*"

  ApiHandlerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: me.loki2302.AwsLambdaHandler::handleRequest
      Role: !GetAtt ApiHandlerRole.Arn
      Code: build/distributions/serverless-experiment.zip
      Runtime: java8
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          APP_MESSAGE_SUFFIX: !Sub "Website bucket name is ${WebsiteBucketName}"
          APP_TODOS_TABLE_NAME: !Ref TodosTable

  TodosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
